#!/usr/bin/env ruby

# (c) 2016 - onwards Georgios Gousios <gousiosg@gmail.com>
#
# MIT licensed, see LICENSE in top level dir
#
# Minimal GitHub webhook for use with GHTorrent.

require 'sinatra'
require 'bunny'
require 'mongo'
require 'yaml'
require 'json'

Mongo::Logger.logger.level = Logger::WARN

def config
  config = if ENV['CONFIG'].nil?
             if ARGV[0].nil?
               'config.yaml'
             else
               ARGV[0]
             end
           else
             ENV['CONFIG']
           end

  @settings ||= YAML::load_file config
  @settings
end

configure do
  unless config['mongo']['username'].nil?
    db = Mongo::Client.new(["#{config['mongo']['host']}:#{config['mongo']['port']}"],
                           :database => config['mongo']['db'])
  else
    db = Mongo::Client.new(["#{config['mongo']['host']}:#{config['mongo']['port']}"],
                           :database => config['mongo']['db'],
                           :user => config['mongo']['username'],
                           :password => config['mongo']['password'])
  end
  db.database.collection_names
  STDERR.puts "Connection to MongoDB: #{config['amqp']['host']} succeded"

  set :mongo, db

  conn = Bunny.new(:host => config['amqp']['host'],
                   :port => config['amqp']['port'],
                   :username => config['amqp']['username'],
                   :password => config['amqp']['password'])
  conn.start

  ch = conn.create_channel
  STDERR.puts "Connection to RabbitMQ: #{config['amqp']['host']} succeded"

  @exchange = ch.topic(config['amqp']['exchange'], :durable => true,
                       :auto_delete => false)

  set :rabbit, @exchange
end

get '/' do
  "ght-web-hook: use POST instead\n"
end

post '/' do
  # Read and parse event
  begin
    event = JSON.parse(request.body.read)
  rescue StandardError => e
    halt 400, "Error parsing object #{request.body.read}"
  end

  key = "evt.#{event['type']}"

  # Save to MongoDB, if it is not there yet
  if settings.mongo['events'].find('id' => event['id']).count == 0
    settings.mongo['events'].insert_one(event)
  end

  # Publish to RabbitMQ
  settings.rabbit.publish event['id'], :persistent => true, :routing_key => key
end
